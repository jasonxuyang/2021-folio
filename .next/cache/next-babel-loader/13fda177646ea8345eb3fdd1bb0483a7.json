{"ast":null,"code":"export function hello() {\n  console.log(\"Hello World.\");\n}\nexport function addMomentum() {\n  // First we get the elements we need, the body and our container on which\n  // we are going to apply a smooth scroll. You will always need a container\n  // to apply a smooth scroll. You will not be able to apply it directly to\n  // the body.\n  var body = document.body;\n  var main = document.querySelector('main');\n  var scroller = document.getElementById('scroller'); // We define variables we will need later. \n  // 2 variables to store the scroll position and 2 variables to store the \n  // container position.\n\n  var sx = 0;\n  var sy = 0;\n  var dx = sx;\n  var dy = sy;\n  var pct = 0; // Then we fix our container so it won't move when the user scrolls.\n  // We will move it ourself with the Linear Interpolation and translations.\n  // main.style.position = 'fixed';\n  // main.style.top = 0;\n  // main.style.left = 0;\n\n  scroller.style.position = 'fixed';\n  scroller.style.bottom = 0;\n  scroller.style.left = 0; // We bind a scroll event to the window to watch scroll position.\n\n  window.addEventListener('scroll', scroll);\n\n  function scroll() {\n    // We only update the scroll position variables\n    sx = window.pageXOffset;\n    sy = window.pageYOffset;\n  } // Then we start a `requestAnimationFrame` loop. \n\n\n  window.requestAnimationFrame(render);\n\n  function render() {\n    // The trick is to set a height to the body to keep the browser scroll bar.\n    body.style.height = main.clientHeight + 'px'; // We calculate our container position by using our Linear Interpolation method.\n\n    dx = lerp(dx, sx, 0.07);\n    dy = lerp(dy, sy, 0.07);\n    dx = Math.floor(dx * 100) / 100;\n    dy = Math.floor(dy * 100) / 100;\n    pct = 100 - getScrollPercent(); // Finally we translate our container to its new positions.\n    // Don't forget to add a minus sign because the container needs to move in \n    // the opposite direction of the window scroll.\n\n    main.style.transform = \"translate(-\".concat(dx, \"px, -\").concat(dy, \"px)\");\n    scroller.style.height = \"\".concat(pct, \"vh\"); // And we loop again.\n\n    window.requestAnimationFrame(render);\n  } // This is our Linear Interpolation method.\n\n\n  function lerp(a, b, n) {\n    return (1 - n) * a + n * b;\n  }\n\n  function getScrollPercent() {\n    var h = document.documentElement,\n        b = document.body,\n        st = 'scrollTop',\n        sh = 'scrollHeight';\n    return (h[st] || b[st]) / ((h[sh] || b[sh]) - h.clientHeight) * 100;\n  }\n}","map":{"version":3,"sources":["/Users/home/2021-folio/main.js"],"names":["hello","console","log","addMomentum","body","document","main","querySelector","scroller","getElementById","sx","sy","dx","dy","pct","style","position","bottom","left","window","addEventListener","scroll","pageXOffset","pageYOffset","requestAnimationFrame","render","height","clientHeight","lerp","Math","floor","getScrollPercent","transform","a","b","n","h","documentElement","st","sh"],"mappings":"AAAA,OAAO,SAASA,KAAT,GAAiB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AAED,OAAO,SAASC,WAAT,GAAuB;AAC1B;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAGC,QAAQ,CAACD,IAAtB;AACA,MAAME,IAAI,GAAGD,QAAQ,CAACE,aAAT,CAAuB,MAAvB,CAAb;AACA,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,cAAT,CAAwB,UAAxB,CAAjB,CAP0B,CAS1B;AACA;AACA;;AACA,MAAIC,EAAE,GAAG,CAAT;AACA,MAAIC,EAAE,GAAG,CAAT;AAEA,MAAIC,EAAE,GAAGF,EAAT;AACA,MAAIG,EAAE,GAAGF,EAAT;AACA,MAAIG,GAAG,GAAG,CAAV,CAjB0B,CAmB1B;AACA;AACA;AACA;AACA;;AAEAN,EAAAA,QAAQ,CAACO,KAAT,CAAeC,QAAf,GAA0B,OAA1B;AACAR,EAAAA,QAAQ,CAACO,KAAT,CAAeE,MAAf,GAAwB,CAAxB;AACAT,EAAAA,QAAQ,CAACO,KAAT,CAAeG,IAAf,GAAsB,CAAtB,CA3B0B,CA8B1B;;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,MAAlC;;AAEA,WAASA,MAAT,GAAkB;AACd;AACAX,IAAAA,EAAE,GAAGS,MAAM,CAACG,WAAZ;AACAX,IAAAA,EAAE,GAAGQ,MAAM,CAACI,WAAZ;AACH,GArCyB,CAuClB;;;AAEAJ,EAAAA,MAAM,CAACK,qBAAP,CAA6BC,MAA7B;;AAEA,WAASA,MAAT,GAAkB;AAEd;AACArB,IAAAA,IAAI,CAACW,KAAL,CAAWW,MAAX,GAAoBpB,IAAI,CAACqB,YAAL,GAAoB,IAAxC,CAHc,CAKd;;AAEAf,IAAAA,EAAE,GAAGgB,IAAI,CAAChB,EAAD,EAAKF,EAAL,EAAS,IAAT,CAAT;AACAG,IAAAA,EAAE,GAAGe,IAAI,CAACf,EAAD,EAAKF,EAAL,EAAS,IAAT,CAAT;AAEAC,IAAAA,EAAE,GAAGiB,IAAI,CAACC,KAAL,CAAWlB,EAAE,GAAG,GAAhB,IAAuB,GAA5B;AACAC,IAAAA,EAAE,GAAGgB,IAAI,CAACC,KAAL,CAAWjB,EAAE,GAAG,GAAhB,IAAuB,GAA5B;AAEAC,IAAAA,GAAG,GAAG,MAAMiB,gBAAgB,EAA5B,CAbc,CAed;AACA;AACA;;AACAzB,IAAAA,IAAI,CAACS,KAAL,CAAWiB,SAAX,wBAAqCpB,EAArC,kBAA+CC,EAA/C;AACAL,IAAAA,QAAQ,CAACO,KAAT,CAAeW,MAAf,aAA2BZ,GAA3B,QAnBc,CAsBd;;AACAK,IAAAA,MAAM,CAACK,qBAAP,CAA6BC,MAA7B;AACH,GAnEiB,CAqElB;;;AACA,WAASG,IAAT,CAAcK,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,WAAO,CAAC,IAAIA,CAAL,IAAUF,CAAV,GAAcE,CAAC,GAAGD,CAAzB;AACH;;AAED,WAASH,gBAAT,GAA4B;AACxB,QAAIK,CAAC,GAAG/B,QAAQ,CAACgC,eAAjB;AAAA,QACIH,CAAC,GAAG7B,QAAQ,CAACD,IADjB;AAAA,QAEIkC,EAAE,GAAG,WAFT;AAAA,QAGIC,EAAE,GAAG,cAHT;AAIA,WAAO,CAACH,CAAC,CAACE,EAAD,CAAD,IAAOJ,CAAC,CAACI,EAAD,CAAT,KAAkB,CAACF,CAAC,CAACG,EAAD,CAAD,IAAOL,CAAC,CAACK,EAAD,CAAT,IAAiBH,CAAC,CAACT,YAArC,IAAqD,GAA5D;AACH;AACZ","sourcesContent":["export function hello() {\n    console.log(\"Hello World.\");\n}\n\nexport function addMomentum() {\n    // First we get the elements we need, the body and our container on which\n    // we are going to apply a smooth scroll. You will always need a container\n    // to apply a smooth scroll. You will not be able to apply it directly to\n    // the body.\n    const body = document.body;\n    const main = document.querySelector('main');\n    const scroller = document.getElementById('scroller');\n\n    // We define variables we will need later. \n    // 2 variables to store the scroll position and 2 variables to store the \n    // container position.\n    let sx = 0;\n    let sy = 0;\n\n    let dx = sx;\n    let dy = sy;\n    let pct = 0;\n\n    // Then we fix our container so it won't move when the user scrolls.\n    // We will move it ourself with the Linear Interpolation and translations.\n    // main.style.position = 'fixed';\n    // main.style.top = 0;\n    // main.style.left = 0;\n    \n    scroller.style.position = 'fixed';\n    scroller.style.bottom = 0;\n    scroller.style.left = 0;\n\n\n    // We bind a scroll event to the window to watch scroll position.\n    window.addEventListener('scroll', scroll);\n\n    function scroll() {\n        // We only update the scroll position variables\n        sx = window.pageXOffset;\n        sy = window.pageYOffset;\n    }\n\n            // Then we start a `requestAnimationFrame` loop. \n\n            window.requestAnimationFrame(render);\n\n            function render() {\n                \n                // The trick is to set a height to the body to keep the browser scroll bar.\n                body.style.height = main.clientHeight + 'px';\n\n                // We calculate our container position by using our Linear Interpolation method.\n\n                dx = lerp(dx, sx, 0.07);\n                dy = lerp(dy, sy, 0.07);\n\n                dx = Math.floor(dx * 100) / 100;\n                dy = Math.floor(dy * 100) / 100;\n\n                pct = 100 - getScrollPercent();\n\n                // Finally we translate our container to its new positions.\n                // Don't forget to add a minus sign because the container needs to move in \n                // the opposite direction of the window scroll.\n                main.style.transform = `translate(-${dx}px, -${dy}px)`;\n                scroller.style.height = `${pct}vh`;\n\n\n                // And we loop again.\n                window.requestAnimationFrame(render);\n            }\n\n            // This is our Linear Interpolation method.\n            function lerp(a, b, n) {\n                return (1 - n) * a + n * b;\n            }\n\n            function getScrollPercent() {\n                var h = document.documentElement, \n                    b = document.body,\n                    st = 'scrollTop',\n                    sh = 'scrollHeight';\n                return (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight) * 100;\n            }\n}"]},"metadata":{},"sourceType":"module"}